NAME
    AnyEvent::VK

SYNOPSIS

    use utf8;
    use AnyEvent;
    use AnyEvent::VK;

    my $vk = AnyEvent::VK->new(
        api_id    => 'Your API ID',
        email     => 'Email/Mobile of user',
        password  => 'User Password',
        scope     => 'Application permissions',
    );

    # Get access_token:
    my $cv = AE::cv; cv->begin;
    $vk->auth(sub {
        my $success = shift;
        if ($success) {
            my ($token, $expires_in, $user_id) = @_;
            # Do some staff
        } else {
            my ($stage, $headers, $body, $cookie) = @_;
            # $stage could be:
            # 1. oauth. Errors while get OAUTH page
            # 2. login. Errors on user authentification
            # 3. redirect. Errors on redirects. $cookie will be defined
        }
        $cv->end;
    });

    # If you already have non-expired access_token:
    my $vk = AnyEvent::VK->new(
        api_id    => 'Your API ID',
        email     => 'Email/Mobile of user',
        password  => 'User Password',
        scope     => 'Application permissions',

        token     => 'Your access_token',
        expires   => 'Token expires timestamp',
        user_id   => 'user_id',
    );
    # Note! Method `auth` WILL NOT reauthentificate user if token is not expired


DESCRIPTION
    AnyEvent::VK is simple asynchronous wrapper for VK API (https://api.vk.com/)
    fully based on AnyEvent::HTTP written in perl. All requests uses https.

EXPORT
    Does not export anything

SUBROUTINES/METHODS
    new - Create AnyEvent::VK object
        Arguments should be passed as key => value list. I.e:

        use utf8;
        use AnyEvent;
        use AnyEvent::VK;

        my $vk = AnyEvent::VK->new(
            app_id    => 'Your APP ID',
            email     => 'Email/Mobile of user',
            password  => 'User Password',
            scope     => 'Application permissions',
        );

        # or

        # If you already have non-expired access_token:
        my $vk = AnyEvent::VK->new(
            app_id    => 'Your APP ID',
            email     => 'Email/Mobile of user',
            password  => 'User Password',
            scope     => 'Application permissions',

            token     => 'Your access_token',
            expires   => 'Token expires in timestamp',
            user_id   => 'user_id',
        );

    app_id
        Requred! Your Application ID
        For more information: https://vk.com/dev/first_guide

    email
        Required! User email or login which used for user authentification

    password
        Required! User password which also used for user authentification

    scope
        Optional. Application permissions.
        Default is: 'friends,photos,audio,video,wall,groups,messages,offline'
        For more information: https://vk.com/dev/permissions

    token
        Optional. Non-Expired Access_token for current user.
        With this parameter you should send `expires` and `user_id`

    expires
        Optional. Timestamp when token becomes expired.

    user_id
        Optional. user_id of user who handles current access_token.


    auth - Force AnyEvent::VK object to get access_token via Implicit Flow
        More information about authorization steps here: https://vk.com/dev/implicit_flow_user

        Example:
        my $cv = AE::cv; cv->begin;
        $vk->auth(sub {
            my $success = shift;
            if ($success) {
                my ($token, $expires_in, $user_id) = @_;
                # Do some staff
            } else {
                my ($stage, $headers, $body, $cookie) = @_;
                # $stage could be:
                # 1. oauth. Errors while get OAUTH page
                # 2. login. Errors on user authentification
                # 3. redirect. Errors on redirects. $cookie will be defined
            }
            $cv->end;
        });

    request - Make request to https://api.vk.com
        More information about supported methods here: https://vk.com/dev/methods
        Example of request:

        # Request to API:
        my $cv = AE::cv; $cv->begin;
        $vk->request('users.get', {
            user_ids => '1,2',
            fields => 'bdate,sex,city,verified',
        }, sub {
            my $response = shift;
            if ($response) {
                my $meta = shift;
                # $response is HASH -- decoded JSON

            } else {
                my $meta = shift;
                # JSON decode failed or response status not 200
                # $meta = {
                #     headers => ...,
                #     body    => ...,
                # };
            }
            $cv->end;
        });

    $AnyEvent::VK::TIMEOUT - set timeout for requests to API
        Default is 3 secs.


RESOURCES
    *   GitHub repository

        <https://github.com/orchaton/AnyEvent-VK>


ACKNOWLEDGEMENTS
    * Thanks to Marc Lehman for AnyEvent::HTTP

    * Thanks to Anton Reznikov for Async::Chain

    * Thanks to Mons Anderson for HTTP::Easy

AUTHOR
    Vladislav Grubov, <vogrubov@mail.ru>


LICENSE AND COPYRIGHT

    Copyright (C) 2017 Vladislav Grubov

    This program is free software; you can redistribute it and/or modify it
    under the terms of either: the GNU General Public License as published
    by the Free Software Foundation; or the Artistic License.